(setf *random-state* (make-random-state t))

(defun main()
    (defvar antList (list (list 0 0)))
    (defvar gridList (list 
        (list '- '- '- '- '- 'x '- 'x '- '- '- '- 'x '- '- '- '- '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- 'x '- '- '- '- '- '- )
        (list '- 'x '- '- '- 'x '- 'x '- '- '- '- 'x '- 'x '- '- '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- 'x 'x 'x 'x 'x 'x 'x 'x 'x '- '- 'x 'x 'x 'x 'x 'x '- 'x '- '- '- 'x '- '- '- '- '- '- )
        (list '- 'x '- '- '- 'x '- 'x '- 'x '- 'x 'x '- 'x 'x 'x 'x 'x '- '- 'x 'x '- '- 'x 'x '- '- '- '- 'x '- 'x '- '- 'x '- 'x '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- 'x '- 'x '- 'x 'x 'x )
        (list '- 'x '- '- '- 'x '- '- '- '- '- '- '- '- 'x '- '- '- '- '- '- 'x '- '- '- '- 'x '- '- 'x 'x 'x '- 'x '- '- '- '- 'x '- '- '- '- '- '- 'x '- 'x '- 'x '- '- '- 'x '- 'x '- 'x '- '- )
        (list '- 'x '- '- '- '- '- 'x '- '- '- '- 'x '- 'x 'x 'x 'x '- '- 'x 'x '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- 'x '- '- 'x 'x 'x '- '- 'x 'x '- 'x '- 'x '- '- '- 'x '- '- '- 'x '- '- )
        (list '- 'x '- '- '- 'x '- 'x '- '- 'x 'x '- '- 'x '- '- '- '- 'x '- '- '- '- '- '- 'x 'x 'x '- '- 'x '- 'x '- '- 'x '- 'x '- '- '- '- '- '- 'x '- 'x '- 'x '- '- '- 'x '- 'x '- '- '- '- )
        (list '- 'x '- '- '- '- '- 'x '- '- '- '- 'x '- 'x '- '- '- '- 'x '- 'x '- '- 'x 'x 'x '- '- 'x '- 'x '- '- '- '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- 'x '- '- '- 'x '- '- '- '- '- '- )
        (list '- 'x '- '- '- 'x '- '- '- '- '- '- 'x '- '- '- '- '- '- 'x '- 'x '- '- 'x '- 'x '- '- 'x '- 'x '- 'x '- '- 'x '- 'x '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- 'x 'x 'x 'x '- 'x '- )
        (list '- '- '- '- '- 'x '- 'x '- '- '- '- 'x '- 'x '- 'x 'x '- 'x '- 'x '- '- 'x '- 'x '- '- 'x '- 'x 'x 'x 'x 'x 'x '- 'x 'x 'x '- 'x 'x 'x 'x '- 'x '- '- '- '- '- 'x '- '- '- '- '- '- )
        (list 'x 'x 'x 'x 'x 'x 'x 'x '- 'x 'x 'x '- 'x 'x '- '- '- '- '- '- 'x '- '- 'x '- '- '- '- 'x '- 'x '- '- '- 'x '- '- '- '- 'x '- '- '- '- 'x '- 'x '- 'x 'x 'x '- 'x '- 'x '- 'x '- '- )
        (list '- 'x '- 'x '- '- '- '- 'x '- '- '- 'x '- 'x 'x '- 'x '- 'x '- 'x '- '- '- '- '- '- '- 'x '- '- '- '- '- 'x 'x '- '- 'x 'x '- '- '- '- 'x '- '- '- '- '- 'x '- 'x '- '- '- 'x '- '- )
        (list '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'x '- '- '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- 'x '- '- '- 'x '- '- '- '- 'x '- '- '- '- 'x '- 'x '- '- '- '- '- 'x '- 'x '- '- '- '- )
        (list '- '- '- 'x 'x '- 'x '- '- '- '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- 'x '- 'x '- '- '- '- 'x '- '- '- 'x '- '- 'x '- 'x '- '- 'x 'x '- '- 'x '- '- '- 'x '- 'x '- 'x 'x '- '- 'x )
        (list '- 'x '- '- '- '- '- '- 'x '- '- '- 'x '- 'x '- 'x '- 'x 'x 'x 'x '- 'x '- 'x 'x 'x 'x '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- 'x '- 'x '- '- '- '- )
        (list '- 'x '- 'x '- '- '- '- 'x '- '- '- 'x '- 'x '- '- '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- '- '- 'x '- '- '- '- '- '- 'x '- '- '- '- '- 'x '- 'x 'x 'x '- 'x 'x '- )
        (list 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x '- 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x '- 'x 'x 'x 'x 'x '- '- '- '- '- '- )
        (list '- 'x '- '- 'x '- 'x '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- '- '- '- '- 'x '- '- '- 'x '- '- '- '- 'x '- '- 'x '- '- '- '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- )
        (list '- 'x '- '- 'x '- 'x '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- '- '- '- '- 'x '- '- '- '- '- 'x '- 'x 'x '- '- '- '- '- '- '- '- 'x '- 'x 'x 'x '- 'x 'x 'x '- 'x '- 'x 'x '- 'x 'x )
        (list '- 'x '- '- 'x '- 'x '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- 'x '- 'x 'x 'x '- '- '- 'x '- '- '- '- '- '- '- '- '- '- 'x '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- )
        (list '- '- '- '- 'x '- '- '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- 'x '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'x '- '- 'x '- '- 'x '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- )
        (list '- '- '- '- 'x '- 'x '- '- '- 'x '- 'x '- '- '- '- '- '- 'x '- 'x '- '- '- 'x '- 'x 'x 'x 'x 'x 'x '- 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x '- '- 'x '- '- '- '- '- '- )
        (list '- 'x '- '- 'x '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- 'x '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- '- '- 'x '- '- '- 'x '- '- 'x '- 'x '- '- '- 'x '- 'x 'x 'x '- 'x '- 'x )
        (list '- 'x '- '- 'x '- 'x '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- 'x '- '- '- '- '- '- 'x 'x 'x 'x 'x '- 'x 'x '- 'x 'x '- '- '- 'x '- '- 'x '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- )
        (list '- 'x 'x '- 'x 'x 'x 'x '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- 'x '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- 'x '- '- '- 'x '- 'x '- '- '- 'x '- 'x )
        (list '- '- '- '- 'x '- '- '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- 'x '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x 'x 'x '- '- '- '- '- 'x '- '- 'x '- 'x '- '- '- 'x '- 'x '- 'x '- '- '- '- )
        (list '- '- 'x '- 'x '- '- '- '- '- '- '- 'x '- '- '- 'x '- '- '- '- '- '- '- '- 'x '- 'x '- '- 'x '- '- '- '- '- 'x '- 'x '- '- '- 'x '- '- '- '- 'x '- '- '- 'x '- 'x '- '- '- '- '- '- )
        (list '- '- 'x '- 'x 'x 'x '- 'x '- 'x '- 'x '- '- '- 'x '- '- 'x '- '- '- '- '- 'x '- 'x '- '- 'x '- '- '- '- '- '- '- 'x '- '- '- 'x '- '- 'x 'x '- '- '- '- 'x '- 'x '- 'x 'x 'x '- 'x )
        (list '- '- 'x '- 'x '- '- '- '- '- 'x '- 'x '- 'x 'x 'x 'x 'x 'x 'x '- 'x 'x 'x 'x '- 'x 'x 'x '- 'x 'x 'x '- 'x 'x '- 'x '- '- '- 'x '- 'x '- '- 'x '- '- '- 'x '- 'x '- '- '- '- '- '- )
        (list '- '- 'x '- 'x '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- '- '- '- '- 'x '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- 'x '- '- '- '- 'x '- '- '- 'x '- 'x 'x 'x 'x 'x '- '- )
        (list '- '- '- '- 'x 'x '- 'x '- 'x 'x '- 'x 'x '- 'x 'x 'x 'x 'x 'x '- 'x 'x 'x 'x '- 'x '- '- 'x 'x 'x 'x '- '- 'x '- '- '- '- '- 'x '- 'x '- '- 'x '- '- '- 'x '- '- '- '- '- '- '- '- )
        (list 'x 'x '- '- 'x '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- 'x '- '- '- 'x '- 'x '- '- '- '- '- '- )
        (list '- '- '- '- 'x '- '- '- '- '- 'x '- 'x 'x 'x 'x 'x '- 'x 'x 'x '- 'x 'x 'x 'x '- 'x '- '- '- '- '- 'x '- '- '- '- 'x '- '- '- 'x '- 'x '- '- 'x '- '- '- 'x '- 'x '- '- '- '- '- '- )
        (list 'x '- 'x '- 'x '- '- '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- '- '- '- '- 'x 'x 'x 'x '- 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x '- 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x '- 'x 'x '- 'x '- 'x 'x )
        (list '- '- '- '- 'x 'x 'x 'x '- '- 'x '- '- '- '- '- '- '- '- 'x 'x '- 'x '- 'x 'x '- '- 'x '- 'x '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- 'x '- '- '- '- 'x '- )
        (list '- '- '- '- 'x '- '- '- '- '- 'x '- 'x '- '- '- 'x '- '- 'x '- '- '- 'x '- 'x '- '- 'x '- 'x '- '- '- '- '- '- '- 'x '- '- '- 'x '- '- '- '- '- '- 'x '- 'x '- 'x '- '- '- '- 'x '- )
        (list '- 'x 'x '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- '- '- '- '- 'x '- '- 'x '- '- '- 'x 'x 'x 'x 'x '- '- '- '- '- 'x '- 'x '- 'x 'x 'x '- '- 'x '- 'x '- '- 'x 'x 'x '- )
        (list '- '- '- '- 'x '- '- 'x '- '- 'x '- 'x '- '- '- 'x '- '- '- '- '- '- 'x '- 'x '- '- '- '- '- '- '- '- '- '- '- '- 'x '- '- '- '- '- '- '- '- '- '- '- '- 'x '- 'x '- '- '- '- 'x '- )
        (list '- '- 'x 'x '- '- '- 'x '- '- '- '- '- '- '- '- 'x '- '- 'x '- '- '- '- '- 'x '- '- '- '- 'x '- '- '- '- '- '- '- 'x '- '- '- 'x '- '- '- '- '- '- 'x '- 'x '- 'x '- '- 'x 'x 'x '- )
        (list '- '- '- '- 'x '- '- 'x '- '- 'x 'x 'x 'x 'x 'x 'x 'x '- 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x 'x '- 'x 'x 'x 'x 'x 'x 'x '- '- '- '- '- '- )
        (list '- '- '- '- 'x '- '- 'x '- '- 'x '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- )

        ))
    (defvar antNum 20)

    (dotimes (n 60)
        ;(format t "Ants ~D~%" antList)
        (loop for ant in antList do
            (setf move = 0)
            (loop while (= move 0) do
                (setq rand (random 100))
                (if (<))
            ) 
        )

        ;Make new ant for first 10 turns
        (if (< n 11)
            (nconc antList (list (list 0 0))))
    )
    (format t "~D" antList)
    ;ACCESSING GRID:
    ;   Use (nth x (nth y gridList))
    ;   This will access the the coordinate (x,y) in the maze

    ;ACCESSING ANTS:
    ;   Use (loop for ant in antList do (COMMAND1)(COMMAND2))
    ;   This will allow us to move each individual ant each turn

    ;PRINT MAP:
    ;   Use (format t "~D" gridList) 
    ;   To print the map
)

(main)